	A. Петя и Java
ограничение по времени на тест : 2 seconds
ограничение по памяти на тест : 256 megabytes
ввод : стандартный ввод
вывод : стандартный вывод

	Маленький Петя недавно начал посещать кружок по программированию. 
	Естественно, перед ним появилась задача выбрать язык, на котором он будет программировать. 
	После долгих размышлений, он понял, что Java — лучший выбор. 
	Главным аргументом в пользу выбора Java было то, 
	что в ней есть очень большой целочисленный тип данных — BigInteger.

	Но после посещения занятий кружка, Петя понял, 
	что не все задачи требует использования типа BigInteger. 
	Как оказалось, в некоторых задачах намного удобнее использовать маленькие типы данных. 
	Поэтому возникает вопрос: «Какой целочисленный тип использовать, если нужно хранить натуральное число n?»

	Петя знает лишь 5 целочисленных типов:

	1) byte занимает 1 байт, позволяет хранить числа от  - 128 до 127

	2) short занимает 2 байта, позволяет хранить числа от  - 32768 до 32767

	3) int занимает 4 байта, позволяет хранить числа от  - 2147483648 до 2147483647

	4) long занимает 8 байт, позволяет хранить числа от  - 9223372036854775808 до 9223372036854775807

	5) BigInteger позволяет хранить любое целое число, но при этом не является примитивным типом, 
	и операции с ним выполняются гораздо медленнее.

	Для всех указанных выше типов значения границ включаются в диапазон значений.

	Из этого списка Петя хочет выбрать самый маленький тип, в котором можно хранить натуральное число n. 
	Так как BigInteger работает гораздо медленнее, Петя рассматривает его в последнюю очередь. Помогите ему.

	Входные данные :
В первой строке записано натуральное число n. 
Оно состоит не более чем из 100 цифр и не содержит лидирующих нулей. 
n не может являться пустой строкой.

Пожалуйста, не используйте спецификатор %lld для чтения или записи 64-х битовых чисел на С++. 
Рекомендуется использовать поток cout (также вы можете использовать спецификатор %I64d).

	Выходные данные :
Выведите первый тип из списка "byte, short, int, long, BigInteger", в котором можно хранить натуральное число n, 
в соответствии с данными, приведенными выше.

	Примеры :
входные данные
127
выходные данные
byte
---------------------------------------
входные данные
130
выходные данные
short
---------------------------------------
входные данные
123456789101112131415161718192021222324
выходные данные
BigInteger
-------------------------------------------------------------------------------------------------------------------------------
	A. Petya and Java
time limit per test : 2 seconds
memory limit per test : 256 megabytes
input : standard input
output : standard output

	Little Petya has recently started attending a programming club. 
	Naturally he is facing the problem of choosing a programming language. 
	After long considerations he realized that Java is the best choice. 
	The main argument in favor of choosing Java was that it has a very large integer data type, called BigInteger.

	But having attended several classes of the club, 
	Petya realized that not all tasks require using the BigInteger type. 
	It turned out that in some tasks it is much easier to use small data types. 
	That's why a question arises: "Which integer type to use if one wants to store a positive integer n?"

	Petya knows only 5 integer types:

	1) byte occupies 1 byte and allows you to store numbers from  - 128 to 127

	2) short occupies 2 bytes and allows you to store numbers from  - 32768 to 32767

	3) int occupies 4 bytes and allows you to store numbers from  - 2147483648 to 2147483647

	4) long occupies 8 bytes and allows you to store numbers from  - 9223372036854775808 to 9223372036854775807

	5) BigInteger can store any integer number, but at that it is not a primitive type, and operations with it are much slower.

	For all the types given above the boundary values are included in the value range.

	From this list, Petya wants to choose the smallest type that can store a positive integer n. 
	Since BigInteger works much slower, Peter regards it last. Help him.

	Input :
The first line contains a positive number n. 
It consists of no more than 100 digits and doesn't contain any leading zeros. 
The number n can't be represented as an empty string.

Please, do not use %lld specificator to read or write 64-bit integers in C++. 
It is preffered to use cout (also you may use %I64d).

	Output :
Print the first type from the list "byte, short, int, long, BigInteger", 
that can store the natural number n, in accordance with the data given above.

	Examples :
input
127
output
byte
---------------------------------------
input
130
output
short
---------------------------------------
input
123456789101112131415161718192021222324
output
BigInteger

http://codeforces.com/problemset/problem/66/A?locale=en